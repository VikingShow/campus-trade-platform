<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.campus.trade.mapper.ProductMapper">

    <!-- 用于列表查询的、简单的 ResultMap -->
    <resultMap id="ProductWithSeller" type="com.campus.trade.entity.Product">
        <id property="id" column="p_id"/>
        <result property="sellerId" column="seller_id"/>
        <result property="categoryId" column="category_id"/>
        <result property="title" column="title"/>
        <result property="description" column="description"/>
        <result property="price" column="price"/>
        <result property="conditionLevel" column="condition_level"/>
        <result property="coverImage" column="cover_image"/>
        <result property="status" column="p_status"/>
        <result property="createTime" column="p_create_time"/>
        <result property="sellerNickname" column="nickname"/>
        <result property="sellerAvatar" column="avatar"/>
        <result property="creditScore" column="credit_score"/>
    </resultMap>

    <!-- 【关键修正】用于详情查询的、包含图片列表的复杂 ResultMap -->
    <resultMap id="ProductWithDetails" type="com.campus.trade.entity.Product">
        <id property="id" column="p_id"/>
        <result property="sellerId" column="seller_id"/>
        <result property="categoryId" column="category_id"/>
        <result property="title" column="title"/>
        <result property="description" column="description"/>
        <result property="price" column="price"/>
        <result property="conditionLevel" column="condition_level"/>
        <result property="coverImage" column="cover_image"/>
        <result property="status" column="p_status"/>
        <result property="createTime" column="p_create_time"/>
        <result property="sellerNickname" column="nickname"/>
        <result property="sellerAvatar" column="avatar"/>
        <result property="creditScore" column="credit_score"/>
        <!--
          使用 <collection> 标签来映射一对多的图片列表。
          它会把所有关联的图片URL，收集到一个名为 "imageUrls" 的 List 中。
        -->
        <collection property="imageUrls" ofType="java.lang.String">
            <result column="image_url"/>
        </collection>
    </resultMap>

    <sql id="productColumns">
        p.id as p_id, p.seller_id, p.category_id, p.title, p.description, p.price,
        p.condition_level, p.cover_image, p.status as p_status, p.create_time as p_create_time,
        u.nickname, u.avatar, u.credit_score
    </sql>

    <!-- 【关键修正】查询商品详情时，LEFT JOIN product_images 表，以获取所有图片 -->
    <select id="findProductById" resultMap="ProductWithDetails">
        SELECT
        <include refid="productColumns"/>,
        pi.image_url
        FROM product p
        JOIN user u ON p.seller_id = u.id
        LEFT JOIN product_images pi ON p.id = pi.product_id
        WHERE p.id = #{productId}
    </select>

    <!-- 【修改】findProducts 查询，加入价格区间和动态排序逻辑 -->
    <select id="findProducts" resultMap="ProductWithSeller">
        SELECT <include refid="productColumns"/>
        FROM product p JOIN user u ON p.seller_id = u.id
        WHERE p.status = 'AVAILABLE'
        <if test="keyword != null and keyword != ''">
            AND p.title LIKE CONCAT('%', #{keyword}, '%')
        </if>
        <if test="categoryId != null and categoryId != ''">
            AND p.category_id = #{categoryId}
        </if>
        <if test="minPrice != null">
            AND p.price >= #{minPrice}
        </if>
        <if test="maxPrice != null">
            AND p.price &lt;= #{maxPrice}
        </if>
        <choose>
            <when test="orderBy == 'price_asc'">
                ORDER BY p.price ASC, p.create_time DESC
            </when>
            <when test="orderBy == 'price_desc'">
                ORDER BY p.price DESC, p.create_time DESC
            </when>
            <otherwise>
                ORDER BY p.create_time DESC
            </otherwise>
        </choose>
    </select>

    <select id="findAllForAdmin" resultMap="ProductWithSeller">
        SELECT <include refid="productColumns"/>
        FROM product p JOIN user u ON p.seller_id = u.id
        <where>
            <if test="keyword != null and keyword != ''">
                p.title LIKE CONCAT('%', #{keyword}, '%')
            </if>
        </where>
        ORDER BY p.create_time DESC
    </select>

    <insert id="insertProduct" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO product(seller_id, category_id, title, description, price, condition_level, cover_image, status)
        VALUES(#{sellerId}, #{categoryId}, #{title}, #{description}, #{price}, #{conditionLevel}, #{coverImage}, 'AVAILABLE')
    </insert>

    <update id="updateProduct">
        UPDATE product SET
        category_id = #{categoryId},
        title = #{title},
        description = #{description},
        price = #{price},
        condition_level = #{conditionLevel},
        <if test="coverImage != null and coverImage != ''">
            cover_image = #{coverImage},
        </if>
        update_time = NOW()
        WHERE id = #{id}
    </update>

    <update id="updateProductStatus">
        UPDATE product SET status = #{status} WHERE id = #{productId}
    </update>

    <select id="countTotalProducts" resultType="long">
        SELECT COUNT(*) FROM product
    </select>

    <!-- 【新增】推荐商品查询的SQL -->
    <!-- 逻辑：1. 找到所有收藏了目标商品的用户。 2. 找到这些用户收藏过的所有其他商品。 3. 按被共同收藏的次数排序，选出最高频的几个。 -->
    <select id="findRecommendedProducts" resultMap="ProductWithSeller">
        SELECT
        <include refid="productColumns"/>,
        COUNT(p.id) as recommendation_score
        FROM favorites f1
        JOIN favorites f2 ON f1.user_id = f2.user_id AND f1.product_id != f2.product_id
        JOIN product p ON f2.product_id = p.id
        JOIN user u ON p.seller_id = u.id
        WHERE f1.product_id = #{productId}
        AND p.status = 'AVAILABLE'
        GROUP BY p.id
        ORDER BY recommendation_score DESC
        LIMIT #{limit}
    </select>

    <delete id="deleteById">
        DELETE FROM product WHERE id = #{productId}
    </delete>
</mapper>
